---------------------------
-- Lemma 6.10 (cons case, left)
--
-- forall f g p x xs.
--
--     map (fork (f,g)) (filter (p . g) (x:xs))
--  =>
--     case p (g x) of
--       False -> map (fork (f,g)) (filter (p . g) xs)
--       True  -> fork (f,g) x : map (fork (f,g)) (filter (p . g) xs)

---------------------------

-- map (fork (f,g)) (filter (p . g) (x:xs))

       { any-call (unfold 'filter >>> case-reduce) }

-- map (fork (f,g)) (let bs = filter (p . g) xs
--                    in case (p . g) x of
--                         False -> bs
--                         True  -> x : bs
--                  )

       { app-arg ; let-subst }

-- map (fork (f,g)) (case (p . g) x of
--                     False -> filter (p . g) xs
--                     True  -> x : filter (p . g) xs
--                  )

       { case-float-arg (forward (lemma map-strict)) }

-- case (p . g) x of
--   False -> map (fork (f,g)) (filter (p . g) xs)
--   True  -> map (fork (f,g)) (x : filter (p . g) xs)

       { case-expr ; unfold '. }

-- case p (g x) of
--   False -> map (fork (f,g)) (filter (p . g) xs)
--   True  -> map (fork (f,g)) (x : filter (p . g) xs)

       { case-alt 1 ; alt-rhs

         -- map (fork (f,g)) (x : filter (p . g) xs)

                 { unfold 'map ; case-reduce }

         -- fork (f,g) x : map (fork (f,g)) (filter (p . g) xs)

       }

-- case p (g x) of
--   False -> map (fork (f,g)) (filter (p . g) xs)
--   True  -> fork (f,g) x : map (fork (f,g)) (filter (p . g) xs)
