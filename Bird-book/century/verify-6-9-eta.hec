---------------------------
-- Verify 6.9-eta
--
-- forall f g xs.   map (fork (f , g)) xs  =  zip (map f xs , map g xs)
--
--   Rewrite both sides of the inductive cases:
--       undefined case: undefined  =  (undefined , undefined)
--       nil case:  []
--       cons case:  (f y , g y) : zip (map f ys , map g ys)
--
---------------------------

rule-to-lemma "6.9-eta"

define-script "6.9-eta-undefined-left"   "lemma map-strict"
define-script "6.9-eta-undefined-right"  "any-bu (forward (lemma map-strict)) ; unfold 'zip ; smash ; undefined-case"

define-script "6.9-eta-nil-left"   "unfold 'map ; case-reduce"
define-script "6.9-eta-nil-right"  "any-bu (inline [ 'zip , 'map ]) ; smash"

define-script "6.9-eta-cons-left"  "unfold 'map ; case-reduce ; { app-arg ; ind-hyp-0 } ; one-td (unfold 'fork >>> case-reduce)"
define-script "6.9-eta-cons-right" "any-bu (inline [ 'zip , 'map ]) ; smash"

verify-lemma "6.9-eta" (inductive-proof-both-sides 'xs [ '"[]" , ': ] [ 6.9-eta-undefined-left , 6.9-eta-nil-left , 6.9-eta-cons-left ] [ 6.9-eta-undefined-right , 6.9-eta-nil-right , 6.9-eta-cons-right ] )
