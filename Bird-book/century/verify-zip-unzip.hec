---------------------------
-- Verify zip-unzip
--
-- zip . unzip  =  id
--
--
---------------------------

rule-to-lemma "zip-unzip"
prove-lemma "zip-unzip"

extensionality 'xys
smash

-- zip (unzip xyz) = xys

any-call (unfold 'unzip)

-- zip (fork (map fst , map snd) xys) = xys

any-call (unfold 'fork >>> case-reduce)

-- zip (map fst xys , map snd xys) = xys

induction 'xys

  -- Case undefined

     -- zip (map fst undefined , map snd undefined) = undefined

     any-call (unfold 'map >>> undefined-case)

     -- zip (undefined , undefined) = undefined

     unfold 'zip
     smash
     undefined-case

     -- undefined = undefined

  -- Case []

     -- zip (map fst [] , map snd []) = []

     any-call (unfold 'map >>> case-reduce)

     -- zip ([],[]) = []

     unfold 'zip
     smash

     -- [] = []

  -- Case (:), induction hypothesis: zip (map fst as , map snd as) = zs

     -- zip (map fst (a:as) , map snd (a:as)) = a:as

     any-call (unfold 'map >>> case-reduce)

     -- zip (fst a : map fst as , snd a : map snd as) = a:as

     rhs (one-td (backward (lemma (ind-hyp-0))))

     -- zip (fst a : map fst as , snd a : map snd as) = z : zip (map fst as , map snd as)

     lhs (unfold 'zip)
     case-split-inline 'a
     smash
